openapi: 3.0.1
info:
  title: submon-api
  version: 1.3.beta
servers:
- url: https://sheltered-journey-75431.herokuapp.com/api
security:
- api_key: []
paths:
  /subscriptions:
    get:
      tags: 
      - "Subscriptions"
      summary: Returns an array of subscriptions
      parameters:
      - name: x-auth-token
        in: header
        description: JWT
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response, with an array of subscriptions.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Subscription'
        404:
          description: No subscriptions found.
          content: {}
    post:
      tags: 
        - "Subscriptions"
      summary: Add a subscription
      parameters:
      - name: x-auth-token
        in: header
        description: JWT
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response, with a representation of the Subscription.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          description: Error validating the subscription body.
          content: {}
  /subscriptions/{id}:
    get:
      tags: 
      - "Subscriptions"
      summary: Retrieve a specific subscription
      parameters:
      - name: id
        in: path
        description: ID of the requested Subscription
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: JWT
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response, with a representation of the Subscription.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Subscription'
        404:
          description: The subscription with the given ID was not found.
          content: {}
    put:
      tags: 
      - "Subscriptions"
      summary: Update a subscription
      parameters:
      - name: id
        in: path
        description: ID of the Subscription to update
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: JWT
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful response, with a representation of the updated Subscription.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Subscription'
        400:
          description: Error validating the subscription body.
          content: {}
    delete:
      tags: 
      - "Subscriptions"
      summary: Delete a subscription
      parameters:
      - name: id
        in: path
        description: ID of the Subscription to delete
        required: true
        schema:
          type: string
      - name: x-auth-token
        in: header
        description: JWT
        required: true
        schema:
          type: string
      responses:
        200:
          description: Subscription deleted.
          content: {}
        404:
          description: The subscription id was not found
          content: {}
  /users/me:
    get:
      tags: 
      - "Users"
      summary: Get user information
      parameters:
      - name: x-auth-token
        in: header
        description: JWT
        required: true
        schema:
          type: string
      responses:
        200:
          description: User information returned.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Error validating the body.
          content: {}
        409:
          description: User already exists. Email address must be unique.
          content: {}
  /users:
    post:
      tags: 
      - "Users"
      summary: Register user
      description: Send registration information to create user and receive JWT.
      requestBody:
        content:
          '*/*': {}
        required: true
      responses:
        200:
          description: OK
          content: {}
components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
      description: A user.
    Subscription:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        subType:
          type: integer
        owner:
          type: string
        expirationDate:
          type: string
        notes:
          type: string
        reminders:
          type: array
          items:
            type: number
      description: A subscription.
  securitySchemes:
    api_key:
      type: apiKey
      description: Requests should pass an x-auth-token header.
      name: x-auth-token
      in: header
